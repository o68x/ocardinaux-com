---
// import "../styles/webfontsKit.css";
import "../styles/global.css";
interface Props {
  title?: string | undefined;
  description?: string | undefined;
}

const {
  title = "Olivier Cardinaux",
  description = "Je conçois et crée des sites internet personnalisés, solides, jolis, et tout ça. Je me demande qui verra ce site, ce n'est pas gagné. Il faut 160 caractères.",
} = Astro.props;
---

<!doctype html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width initial-scale=1" />
    <meta name="generator" content={Astro.generator} />

    <link rel="icon" href="/favicon.png" />

    <!-- HTML Meta Tags -->
    <title>Olivier Cardinaux - Construction de sites internet</title>
    <meta name="description" content="" />

    <!-- Open Graph Meta Tags -->
    <meta property="og:url" content={Astro.site} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="https://ocardinaux.com/og-banner.webp" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />

    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:domain" content="ocardinaux.com" />
    <meta property="twitter:url" content={Astro.site} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content="https://ocardinaux.com/og-banner.webp" />

    <!-- Matomo -->
    <script>
      // @ts-ignore
      var _paq = (window._paq = window._paq || []);
      /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
      _paq.push(["trackPageView"]);
      _paq.push(["enableLinkTracking"]);
      (function () {
        var u = "//matomo.ruechappe.eu/";
        _paq.push(["setTrackerUrl", u + "matomo.php"]);
        _paq.push(["setSiteId", "3"]);
        var d = document,
          g = d.createElement("script"),
          s = d.getElementsByTagName("script")[0];
        g.async = true;
        g.src = u + "matomo.js";
        // @ts-ignore
        s.parentNode.insertBefore(g, s);
      })();
    </script>
    <!-- End Matomo Code -->
    <script is:inline>
      // Add “loaded” class once the document has completely loaded.
      addEventListener("load", () => document.documentElement.classList.add("loaded"));

      // This code is inlined in the head to make dark mode instant & blocking.
      const getThemePreference = () => {
        if (typeof sessionStorage !== "undefined" && sessionStorage.getItem("theme")) {
          return sessionStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
      };
      const isDark = getThemePreference() === "dark";
      document.documentElement.classList[isDark ? "add" : "remove"]("theme-dark");

      if (typeof sessionStorage !== "undefined") {
        // Watch the document element and persist user preference when it changes.
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains("theme-dark");
          sessionStorage.setItem("theme", isDark ? "dark" : "light");
        });
        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ["class"],
        });
      }
    </script>
  </head>
  <body>
    <slot />
  </body>
</html>

<style is:global>
  body {
    min-height: 100vh;
  }
</style>
